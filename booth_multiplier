module booth_multiplier (
    input signed [31:0] multiplicand,   
    input signed [31:0] multiplier,     
    output reg signed [63:0] product,   
    input clk,                          
    input reset                         
);
    reg signed [63:0] A;                
    reg signed [31:0] Q;                
    reg Q_1;                            
    reg signed [63:0] M;                
    reg [5:0] count;                    

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            A <= 64'd0;                 
            Q <= multiplier;            
            Q_1 <= 1'b0;                
            M <= {{32{multiplicand[31]}}, multiplicand}; 
            count <= 6'd32;             
        end else if (count > 0) begin
            case ({Q[0], Q_1})
                2'b01: A <= A + M;      
                2'b10: A <= A - M;      
                default: A <= A;        
            endcase
            
            {A, Q, Q_1} <= {A[63], A, Q, Q_1} >> 1;
            
            count <= count - 1;         
        end else begin
            product <= {A, Q};         
        end
    end
endmodule
